import tkinter as tk
from tkinter import ttk, filedialog, messagebox, simpledialog
import pandas as pd
import openpyxl
import os
import shutil
import json
from datetime import datetime

# Constants
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
USERS_FILE = os.path.join(SCRIPT_DIR, "users.json")
PENDING_DIR = os.path.join(SCRIPT_DIR, "pending_files")
APPROVED_DIR = os.path.join(SCRIPT_DIR, "approved_files")
BARCODE_REQUESTS_FILE = os.path.join(SCRIPT_DIR, "barcode_requests.csv")

# Ensure necessary directories exist
os.makedirs(PENDING_DIR, exist_ok=True)
os.makedirs(APPROVED_DIR, exist_ok=True)

# Load user data (simulate login)
def load_users():
    if not os.path.exists(USERS_FILE):
        with open(USERS_FILE, "w") as f:
            json.dump({"admin": {"password": "admin", "role": "admin"}}, f)
    with open(USERS_FILE, "r") as f:
        return json.load(f)

# Save user data
def save_users(users):
    with open(USERS_FILE, "w") as f:
        json.dump(users, f, indent=2)

users_data = load_users()

# Prompt login
username = simpledialog.askstring("Login", "Enter username:")
password = simpledialog.askstring("Login", "Enter password:", show='*')

if username not in users_data or users_data[username]["password"] != password:
    messagebox.showerror("Login Failed", "Invalid username or password.")
    exit()

role = users_data[username]["role"]
is_admin = role == "admin"

# Tkinter app setup
root = tk.Tk()
root.title(f"Excel Manager ({role.title()})")
root.geometry("1000x650")

left_panel = tk.Frame(root, bg="lightgray", width=180)
left_panel.pack(side="left", fill="y")

right_panel = tk.Frame(root, bg="white")
right_panel.pack(side="right", expand=True, fill="both")

style = ttk.Style()
style.configure("Bold.TButton", font=("Segoe UI", 10, "bold"), width=20, border=15)

# Treeview globals
tree = None
tree_frame = None

# Helper: Clear tree

def clear_tree():
    global tree, tree_frame
    if tree:
        tree.destroy()
    if tree_frame:
        tree_frame.destroy()

# View all approved files
def view_all():
    clear_tree()
    global tree, tree_frame

    excel_files = [f for f in os.listdir(APPROVED_DIR) if f.endswith(('.xlsx', '.xls'))]
    if not excel_files:
        messagebox.showinfo("No Files", "No approved Excel files available.")
        return

    tree_frame = tk.Frame(right_panel, bg="white")
    tree_frame.pack(expand=True, fill="both", padx=10, pady=10)

    tree = ttk.Treeview(tree_frame)
    tree.grid(row=0, column=0, sticky="nsew")

    scrollbar_y = ttk.Scrollbar(tree_frame, orient="vertical", command=tree.yview)
    scrollbar_y.grid(row=0, column=1, sticky="ns")
    scrollbar_x = ttk.Scrollbar(tree_frame, orient="horizontal", command=tree.xview)
    scrollbar_x.grid(row=1, column=0, sticky="ew")

    tree.configure(yscrollcommand=scrollbar_y.set, xscrollcommand=scrollbar_x.set)
    tree_frame.grid_rowconfigure(0, weight=1)
    tree_frame.grid_columnconfigure(0, weight=1)

    for file in excel_files:
        try:
            path = os.path.join(APPROVED_DIR, file)
            df = pd.read_excel(path, engine="openpyxl")
        except Exception as e:
            continue

        if df.empty:
            continue

        parent_id = tree.insert("", "end", text=file, open=True)
        if not tree["columns"]:
            tree["columns"] = list(df.columns)
            tree["show"] = "tree headings"
            for col in df.columns:
                tree.heading(col, text=col)
                tree.column(col, width=120, anchor="center")

        for row in df.itertuples(index=False):
            tree.insert(parent_id, "end", values=list(row))

# Load file (goes to pending for approval)
def load_file():
    file_path = filedialog.askopenfilename(title="Select Excel File", filetypes=[("Excel files", "*.xlsx *.xls")])
    if file_path:
        dest_path = os.path.join(PENDING_DIR, f"{datetime.now().strftime('%Y%m%d_%H%M%S')}_{os.path.basename(file_path)}")
        shutil.copy(file_path, dest_path)
        messagebox.showinfo("Upload Complete", "File uploaded for admin approval.")

# Admin: Approve or reject pending files
def approve_files():
    clear_tree()
    global tree, tree_frame
    pending_files = [f for f in os.listdir(PENDING_DIR) if f.endswith(('.xlsx', '.xls'))]
    if not pending_files:
        messagebox.showinfo("No Pending Files", "No files pending approval.")
        return

    tree_frame = tk.Frame(right_panel, bg="white")
    tree_frame.pack(expand=True, fill="both")
    tree = ttk.Treeview(tree_frame, columns=("filename", "action"), show="headings")
    tree.heading("filename", text="Filename")
    tree.heading("action", text="Action")

    for f in pending_files:
        tree.insert("", "end", values=(f, "Pending"))
    tree.pack(fill="both", expand=True)

    def approve():
        sel = tree.selection()
        for item in sel:
            filename = tree.item(item)['values'][0]
            shutil.move(os.path.join(PENDING_DIR, filename), os.path.join(APPROVED_DIR, filename))
        messagebox.showinfo("Success", "Selected files approved.")
        approve_files()

    def reject():
        sel = tree.selection()
        for item in sel:
            filename = tree.item(item)['values'][0]
            os.remove(os.path.join(PENDING_DIR, filename))
        messagebox.showinfo("Success", "Selected files rejected.")
        approve_files()

    btn_frame = tk.Frame(tree_frame)
    btn_frame.pack()
    ttk.Button(btn_frame, text="Approve", style="Bold.TButton", command=approve).pack(side="left", padx=5)
    ttk.Button(btn_frame, text="Reject", style="Bold.TButton", command=reject).pack(side="left", padx=5)

# Admin: Manage users
def manage_users():
    clear_tree()
    users = load_users()

    def add_user():
        uname = simpledialog.askstring("Add User", "Enter new username:")
        pwd = simpledialog.askstring("Password", "Enter password:", show='*')
        if uname in users:
            messagebox.showerror("Error", "User already exists.")
        else:
            users[uname] = {"password": pwd, "role": "user"}
            save_users(users)
            messagebox.showinfo("Success", f"User {uname} added.")

    def del_user():
        uname = simpledialog.askstring("Delete User", "Enter username to delete:")
        if uname == "admin" or uname not in users:
            messagebox.showerror("Error", "Invalid user.")
        else:
            del users[uname]
            save_users(users)
            messagebox.showinfo("Deleted", f"User {uname} deleted.")

    tk.Label(right_panel, text="User Management", font=("Segoe UI", 14)).pack(pady=10)
    tk.Button(right_panel, text="Add User", command=add_user).pack(pady=5)
    tk.Button(right_panel, text="Delete User", command=del_user).pack(pady=5)

# Admin: Approve barcode requests
def approve_barcodes():
    clear_tree()
    if not os.path.exists(BARCODE_REQUESTS_FILE):
        messagebox.showinfo("No Requests", "No barcode requests found.")
        return
    df = pd.read_csv(BARCODE_REQUESTS_FILE)
    if df.empty:
        messagebox.showinfo("No Requests", "No barcode requests available.")
        return

    tree_frame = tk.Frame(right_panel, bg="white")
    tree_frame.pack(expand=True, fill="both")

    tree = ttk.Treeview(tree_frame, columns=list(df.columns), show="headings")
    for col in df.columns:
        tree.heading(col, text=col)
        tree.column(col, width=100)

    for row in df.itertuples(index=False):
        tree.insert("", "end", values=list(row))
    tree.pack(fill="both", expand=True)

    def approve():
        messagebox.showinfo("Approved", "(Simulated) Barcode requests approved.")

    tk.Button(tree_frame, text="Approve All", command=approve).pack(pady=5)

# Left panel buttons
btn_view = ttk.Button(left_panel, text="View All", style="Bold.TButton", command=view_all)
btn_view.pack(pady=5, padx=10)

btn_load = ttk.Button(left_panel, text="Upload File", style="Bold.TButton", command=load_file)
btn_load.pack(pady=5, padx=10)

if is_admin:
    ttk.Button(left_panel, text="Approve Files", style="Bold.TButton", command=approve_files).pack(pady=5, padx=10)
    ttk.Button(left_panel, text="Manage Users", style="Bold.TButton", command=manage_users).pack(pady=5, padx=10)
    ttk.Button(left_panel, text="Barcode Requests", style="Bold.TButton", command=approve_barcodes).pack(pady=5, padx=10)

# Run UI
view_all()
root.mainloop()
